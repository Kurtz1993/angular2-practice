// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/56295f5058cac7ae458540423c50ac2dcf9fc711/chartjs/chart.d.ts

interface ChartData<T> {
    /**
     * Contains data for each dataset. See the documentation for each chart type
     * to determine the valid options that can be attached to the dataset.
     */
    datasets?: T[];
    /**
     * Optional parameter that is used with the category axis.
     */
    labels?: string[];
    /**
     * Optional parameter that is used with the category axis and is used if the
     * axis is horizontal.
     */
    xLabels?: string[];
    /**
     * Optional parameter that is used witht the category axis and is used if the
     * axis is vertical.
     */
    yLabels?: string[];
}

interface ChartOptions extends FontSettings {
    /**
     * Resizes when the canvas container does.
     * Defaults to true.
     */
    responsive?: boolean;
    /**
     * Duration in milliseconds it takes to animate to new size after a resize event.
     * Defaults to 0.
     */
    responsiveAnimationDuration?: number;
    /**
     * Maintain the original canvas aspect ratio (width / height) when resizing.
     * Defaults to true.
     */
    maintainAspectRatio?: boolean;
    /**
     * Events that the chart should listen to for tooltips and hovering.
     * Defaults to ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove', 'touched'].
     */
    events?: string[];
    /**
     * Called if the event is of type 'mouseup' or 'click'. Called in the context of the chart
     * and passed an array of active elements.
     * Defaults to null.
     */
    onClick?: Function;
    /**
     * Function to generate a legend. Receives the chart object to generate a legend from.
     * Default implementation returns an HTML string.
     */
    legendCallback?: (chart: any) => any | string;
    /**
     * Called when a resize occurs. Gets passed two arguments, the chart instance and the new size.
     * Defaults to null.
     */
    onResize?: (chart: any, newSize: number) => any;
    /** Title configuration. */
    title?: TitleSettings,
    /** Legend configuration. */
    legend?: LegendSettings;
    /** Hover configuration */
    hover?: HoverSettings;
    /** Animation configuration. */
    animation?: AnimationSettings;
    /** Tooltip configuration. */
    tooltips?: TooltipSettings;
}

interface FontSettings {
    /**
     * Default font color for all text. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to #666.
     */
    defaultFontColor?: string;
    /**
     * Default font family for all text.
     * Defaults to "'Helvetica neue', 'Helvetica', 'Arial', sans-serif".
     */
    defaultFontFamily?: string;
    /**
     * Default font size (in px) for text. Does not apply to radialLinear scale point labels.
     * Defaults to 12.
     */
    defaultFontSize?: number;
    /**
     * Default font style. Does not apply to tooltip title or footer.
     * Does not apply to chart title.
     * Defaults to 'normal'.
     */
    defaultFontStyle?: string;
}

interface TitleSettings {
    /**
     * Display the title block.
     * Defaults to false.
     */
    display?: boolean;
    /**
     * Position of the title. Only 'top' or 'bottom' are currently allowed.
     * Defaults to 'top'.
     */
    position?: string;
    /**
     * Marks that this box should take the full width of the canvas (pushing down other boxes).
     * Defaults to true.
     */
    fullWidth?: boolean;
    /**
     *  Font size inherited from global configuration.
     */
    fontSize?: number;
    /**
     * Font family inherited from global configuration.
     */
    fontFamily?: string;
    /**
     * Font color inherited from global configuration.
     */
    fontColor?: string;
    /**
     * Font styling of the title.
     * Defaults to 'bold'.
     */
    fontStyle?: string;
    /**
     * Number of pixels to add above and below the title text.
     * Defaults to 10.
     */
    padding?: number;
    /**
     * Title text.
     * Defaults to ''.
     */
    text?: string;
}

interface LegendSettings {
    /**
     * Is the legend displayed.
     * Defaults to true.
     */
    display?: boolean;
    /**
     * Position of the legend. Options are 'top' or 'bottom'.
     * Defaults to 'top'.
     */
    position?: string;
    /**
     * Marks that this box should take the full width of the canvas (pushing down other boxes).
     * Defaults to true.
     */
    fullWidth?: boolean;
    /**
     * A callback that is called when a click is registered on top of a label item.
     */
    onClick?: (event: any, legendItem: LegendItem) => any;
    /**
     * Legend label configurations.
     */
    labels?: LegendLabelSettings;
}

interface LegendLabelSettings {
    /**
     * Width of colored box.
     * Defaults to 40.
     */
    boxWidth?: number;
    /**
     * Font size inherited from global configuration.
     */
    fontSize?: number;
    /**
     * Font style inherited from global configuration.
     */
    fontStyle?: string;
    /**
     * Font color inherited from global configuration.
     */
    fontColor?: string;
    /**
     * Font family inherited from global configuration.
     */
    fontFamily?: string;
    /**
     * Padding between rows of colored boxes.
     */
    padding?: number;
    /**
     * Generates legend items for each thing in the legend.
     * Default implementation returns the text + styling for the color box.
     */
    generateLabels?: (chart: any) => any;
    /**
     * Label style will match corresponding point style (size is based on fontSize, boxWidth is not used in this case).
     * Defaults to false.
     */
    usePointStyle?: boolean;
}

interface LegendItem {
    /** Label that will be displayed. */
    text: string;
    /** Fill style of the legend box. Can be any valid css color format (i.e. #444) as a string. */
    fillStyle: string;
    /** If true, this item represents a hidden dataset. label will be rendered with a strike-through effect. */
    hidden: boolean;
    /** For box border. See https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap */
    lineCap: string;
    /** For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash */
    lineDash: number[];
    /** For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset */
    lineDashOffset: number;
    /** For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin */
    lineJoin: string;
    /** Width of box border. */
    lineWidth: number;
    /** Stroke style of the legend box. */
    strokeStyle: string;
    /** Point style of the legend box (only used if usePointStyle is true). */
    pointStyle: string;
}

interface TooltipSettings {
    /** Are tooltips enabled. Defaults to true. */
    enabled?: boolean;
    /** Function to generate custom tooltips. */
    custom?: Function;
    /**
     * Sets which elements appear in the tooltip. Acceptable options are 'single', 'label' or 'x-axis'.
     * single highlights the closest element.
     * label highlights elements in all datasets at the same X value.
     * x-axis also highlights elements in all datasets at the same X value, but activates when hovering
     * anywhere within the vertical slice of the x-axis representing that X value.
     * Defaults to 'single'.
     */
    mode?: string;
    /** Allows sorting of Tooltip items. Must implement a function that can be passed to Array.prototype.sort */
    itemSort?: Function;
    /** Background color of the tooltip. Can be any valid css color format (i.e. #444) as a string. */
    backgroundColor?: string;
    /** Font family for the tooltip title inherited from global settings. */
    titleFontFamily?: string;
    /** Font size for the tooltip title inherited from global settings. */
    titleFontSize?: number;
    /**
     * Font style for the tooltip title.
     * Defaults to 'bold'.
     */
    titleFontStyle?: string;
    /**
     * Font color for tooltip title. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to '#fff' .
     */
    titleFontColor?: string;
    /** Spacing to add to top and bottom of each title line. Defaults to 2. */
    titleSpacing?: number;
    /** Margin to add on bottom of title section. Defaults to 6. */
    titleMarginBottom?: number;
    /** Font family for tooltip items inherited from global settings. */
    bodyFontFamily?: string;
    /** Font size for tooltip items inherited from global settings. */
    bodyFontSize?: number;
    /** Font style for tooltip items. Defaults to 'bold'. */
    bodyFontStyle?: string;
    /**
     * Font color for tooltip items. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to '#fff'.
     */
    bodyFontColor?: string;
    /** Spacing to add to top and bottom of each tooltip item. Defaults to 2. */
    bodySpacing?: number;
    /** Font family for tooltip footer inherited from global settings. */
    footerFontFamily?: string;
    /** Font size for tooltip footer inherited from global settings. */
    footerFontSize?: number;
    /** Font style for tooltip footer. Defaults to 'bold'. */
    footerFontStyle?: string;
    /**
     * Font color for tooltip footer. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to '#fff'.
     */
    footerFontColor?: string;
    /** Spacing to add to top and bottom of each footer line. Defaults to 2. */
    footerSpacing?: number;
    /** Margin to add before drawing the footer. Defaults to 6. */
    footerMarginTop?: number;
    /** Padding to add on left and right of tooltip. Defaults to 6. */
    xPadding?: number;
    /** Padding to add on top and bottom of tooltip. Defaults to 6. */
    yPadding?: number;
    /** Size in px of the tooltip arrow. Defaults to 5. */
    caretSize?: number;
    /** Radius of tooltip corner curves. Defaults to 6. */
    cornerRadius?: number;
    /**
     * Color to draw behind colored boxes when multiple items are in the tooltip.
     * Can be any valid css color format (i.e. #444) as a string.
     * Defaults to '#fff'.
     */
    multiKeyBackground?: string;
    /** Callbacks that respond to various events. */
    callbacks?: TooltipCallbacks;
}

interface TooltipCallbacks {
    /** Text to render before the title. */
    beforeTitle?: (tooltipItems: TooltipItem[], data: any) => any;
    /** Text to render as the title. */
    title?: (tooltipItems: TooltipItem[], data: any) => any;
    /** Text to render after the title. */
    afterTitle?: (tooltipItems: TooltipItem[], data: any) => any;
    /** Text to render before the body section. */
    beforeBody?: (tooltipItems: TooltipItem[], data: any) => any;
    /** Text to render before an individual label. */
    beforeLabel?: (tooltipItem: TooltipItem, data: any) => any;
    /** Text to render for an individual item in the tooltip.  */
    label?: (tooltipItem: TooltipItem, data: any) => any;
    /**
     * Returns the colors to render for the tooltip item.
     * Return as an object containing two parameters borderColor and backgroundColor.
     */
    labelColor?: (tooltipItem: TooltipItem, chart: any) => { borderColor: string, backgroundColor: string };
    /** Text to render after an individual label. */
    afterLabel?: (tooltipItem: TooltipItem, data: any) => any;
    /** Text to render after the body section. */
    afterBody?: (tooltipItems: TooltipItem[], data: any) => any;
    /** Text to render before the footer section. */
    beforeFooter?: (tooltipItems: TooltipItem[], data: any) => any;
    /** Text to render as the footer. */
    footer?: (tooltipItems: TooltipItem[], data: any) => any;
    /** Text to render after the footer section. */
    afterFooter?: (tooltipItems: TooltipItem[], data: any) => any;
}

interface TooltipItem {
    /** X value of the tooltip as a string. */
    xLabel: string;
    /** Y value of the tooltip as a string. */
    yLabel: string;
    /** Index of the dataset the item comes from. */
    datasetIndex: number;
    /** Index of this data item in the dataset. */
    index: number;
}

interface HoverSettings {
    /**
     * Sets which elements appear in the tooltip. Acceptable options are 'single', 'label' or 'x-axis'.
     * single highlights the closest element.
     * label highlights elements in all datasets at the same X value.
     * x-axis also highlights elements in all datasets at the same X value, but activates when hovering
     * anywhere within the vertical slice of the x-axis representing that X value.
     * Defaults to 'single'.
     */
    mode?: string;
    /**
     * Duration in milliseconds it takes to animate hover style changes.
     * Defaults to 400.
     */
    animationDuration?: number;
    /**
     * Called when any of the events fire. Called in the context of the chart and passed an array of active elements (bar, points, etc).
     */
    onHover?: (elements: any[]) => any;
}

interface AnimationSettings {
    /** The number of milliseconds an animation takes. Defaults to 1000. */
    duration?: number;
    /** Easing function to use. Defaults to 'easeOutQuart'. */
    easing?: string;
    /**
     * Callback called on each step of an animation. Passed a single argument, an object, containing the
     * chart instance and an object with details of the animation.
     */
    onProgress?: (progress: {chart: any, animationObject: AnimationObject}) => any;
    /** Callback called at the end of an animation. Passed the same arguments as onProgress. */
    onComplete?: (progress: {chart: any, animationObject: AnimationObject}) => any;
}

interface AnimationObject {
    /** Current animation frame number. */
    currentStep: number;
    /** Number of animation frames. */
    numSteps: number;
    /** Animation easing to use. */
    easing: string;
    /** Function that renders the chart. */
    render: Function;
    /** User callback. */
    onAnimationProgress: Function;
    /** User callback. */
    onAnimationComplete: Function;
}

interface ElementsSettings {
    /** Doughnut, Pie charts and polar area arc configurations. */
    arc?: ArcSettings;
    /** Line charts line configurations. */
    line?: LineSettings;
    /** Point configuration for line and bubble charts. */
    point?: PointSettings;
    /** Rectangle configurations for bar charts. */
    rectangle?: RectangleSettings;
}

interface ArcSettings {
    /**
     * Default fill color for arcs. Can be any valid css color format (i.e. #444) as a string.
     * Inherited from the global default. Defaults to 'rgba(0,0,0,0.1)'.
     */
    backgroundColor?: string;
    /**
     * Default stroke color for arcs. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to '#fff'.
     */
    borderColor?: string;
    /** Default stroke width for arcs. Defaults to 2. */
    borderWidth?: number;
}

interface LineSettings {
    /**
     * Default bezier curve tension. Set to 0 for no bezier curves.
     * Defaults to 0.4.
     */
    tension?: number;
    /**
     * Default line fill color. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to 'rgba(0,0,0,0.1)'.
     */
    backgroundColor?: string;
    /** Default line stroke width. Defaults to 3. */
    borderWidth?: number;
    /**
     * Default line stroke color. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to 'rgba(0,0,0,0.1)'.
     */
    borderColor?: string;
    /**
     * Default line cap style. See https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap
     * Defaults to 'butt'.
     */
    borderCapStyle?: string;
    /**
     * Default line dash. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash
     * Defaults to [].
     */
    borderDash?: any[];
    /**
     * Default line dash offset. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset
     * Defaults to 0.0
     */
    borderDashOffset?: number;
    /**
     * Default line join style. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin
     * Defaults to 'miter'.
     */
    borderJoinStyle?: string;
    /**
     * If true, bezier control points are kept inside the chart. If false, no restriction is enforced.
     * Defaults to true.
     */
    capBezierPoints?: boolean;
    /** If true, the line is filled. Defaults to true. */
    fill?: boolean;
    /** If true, the line is shown as a stepped line and 'tension' will be ignore. Defaults to false. */
    stepped?: boolean;
}

interface PointSettings {
    /** Default point radius. Defaults to 3. */
    radius?: number;
    /** Default point style. Defaults to 'circle'. */
    pointStyle?: string;
    /**
     * Default point fill color. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to 'rgba(0,0,0,0.1)'.
     */
    backgroundColor?: string;
    /** Default point stroke width. Defaults to 1. */
    borderWidth?: number;
    /**
     * Default point stroke color. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to 'rgba(0,0,0,0.1)'.
     */
    borderColor?: string;
    /** Extra radius added to point radius for hit detection. Defaults to 1. */
    hitRadius?: number;
    /** Default point radius when hovered. Defaults to 4. */
    hoverRadius?: number;
    /** Default stroke width when hovered. Defaults to 1. */
    hoverBorderWidth?: number;
}

interface RectangleSettings {
    /**
     * Default bar fill color. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to 'rgba(0,0,0,0.1)'.
     */
    backgroundColor?: string;
    /** Default bar stroke width. Defaults to 0. */
    borderWidth?: number;
    /**
     * Default bar stroke color. Can be any valid css color format (i.e. #444) as a string.
     * Defaults to 'rgba(0,0,0,0.1)'.
     */
    borderColor?: string;
    /**
     * Default skipped (excluded) border for rectangle. Can be one of bottom, left, top, right.
     * Defaults to 'bottom'.
     */
    borderSkipped?: string;
}

interface BarDataset {
    /** The data to plot as bars. */
    data: number[];
    /** The label for the dataset which appears in the legend and tooltips. */
    label?: string;
    /** The ID of the x axis to plot this dataset on. */
    xAxisID?: string;
    /** The ID of the y axis to plot this dataset on. */
    yAxisID?: string;
    /** The fill color or colors of the bars. Can be any valid css color format (i.e. #444) as a string. */
    backgroundColor?: string | string[];
    /** Bar border color or colors. Can be any valid css color format (i.e. #444) as a string. */
    borderColor?: string | string[];
    /** Border width of bar or bars in pixels. */
    borderWidth?: number | number[];
    /** Which edge to skip drawing the border for. Options are 'bottom', 'left', 'top' and 'right'. */
    borderSkipped?: string | string[];
    /** Bar background color or colors when hovered. Can be any valid css color format (i.e. #444) as a string. */
    hoverBackgroundColor?: string | string[];
    /** Bar border color or colors when hovered. Can be any valid css color format (i.e. #444) as a string. */
    hoverBorderColor?: string | string[];
    /** Border width of bar or bars when hovered. */
    hoverBorderWidth?: number | number[];
}

interface BarChartOptions extends ChartOptions {
    /**
     * Label's hover mode. 'label' is used since the x axis displayes data by the index in the dataset.
     */
    hover?: {mode?: string};
    /**
     * Options for the chart axes.
     */
    scales?: Scales;
}

interface Scales {
    /**
     * The bar chart officially supports only 1 x-axis but uses an array to keep the API consistent.
     * Use a scatter chart if you need multiple x axes.
     */
    xAxes?: XAxes;
    /**
     * Options for the y axes.
     */
    yAxes?: YAxes;
}

interface XAxes {
    /**
     * Type of scale being employed. Custom scales can be created and registered with a string key.
     * Options: 'category', 'linear', 'logarithmic', 'time', 'radialLinear'.
     */
    type?: string;
    /** If true, show the scale. */
    display?: boolean;
    /** Id of the axis so that data can bind to it. Defaults to 'x-axis-0'. */
    id?: string;
    /** If true, bars are stacked on the x-axis. */
    stacked?: boolean;
    /**
     * Percent (0-1) of the available width (the space between the gridlines for small datasets) for each
     * data-point to use for the bars.
     * Defaults to 0.8
     */
    categoryPercentage?: number;
    /**
     * Percent (0-1) of the available width each bar should be within the category percentage.
     * 1.0 will take the whole category width and put the bars right nect to each other.
     * Defaults to 0.9
     */
    barPercentage?: number;
    gridLines?: any;
}

interface YAxes {
    /**
     * Type of scale being employed. Custom scales can be created and registered with a string key.
     * Options: 'category', 'linear', 'logarithmic', 'time', 'radialLinear'.
     */
    type?: string;
    /** If true, show the scale. */
    display?: boolean;
    /** Id of the axis so that data can bind to it. Defaults to 'y-axis-0'. */
    id?: string;
    /** If true, bars are stacked on the y-axis. */
    stacked?: boolean;
}

interface DoughnutDataset {
    /** Data to plot as arcs. */
    data: number[];
    /** Label for the dataset which appears in the legend and tooltips. */
    label?: string;
    /** The fill colors of the arcs. Can be any valid css color format (i.e. #444) as a string. */
    backgroundColor?: string[];
    /** Arc border colors. Can be any valid css color format (i.e. #444) as a string. */
    borderColor?: string [];
    /** Border width of arcs in pixels. */
    borderWidth?: number[];
    /** Arc background colors when hovered. Can be any valid css color format (i.e. #444) as a string. */
    hoverBackgroundColor?: string[];
    /** Arc border colors when hovered. Can be any valid css color format (i.e. #444) as a string. */
    hoverBorderColor?: string[];
    /** Border width of arcs when hovered. */
    hoverBorderWidth?: number[];
}

interface ChartSettings<T> {
    /**
     * Type of the chart. Can be 'bar', 'pie', 'doughnut', 'polar', 'point', 'line'.
     */
    type: string;
    data?: ChartData<T>;
    options: ChartOptions;
}

interface ChartElement {
    _chart: Chart;
    _datasetIndex: number;
    _index: number;
    _model: ChartData<any>;
    _start: any;
    _view: ChartData<any>;
}

declare class Chart {
    constructor(context: CanvasRenderingContext2D, settings: ChartSettings<any>);

    /**
     * Gets the single element at the event position.
     * If there are multiple items within range, only the first is returned.
     * @param event - A click event.
     * @returns The first element that matched the click event position.
     */
    getElementAtEvent(event: MouseEvent): ChartElement[];
    getElementsAtEvent(event: MouseEvent): ChartElement[];
    /**
     * Destroy the chart instance.
     */
    destroy(): void;
    /** Clear the chart canvas. */
    clear(): void;
    /**
     * Triggers an update of the chart.
     * This can be safely called after replacing the entire data object.
     * This will update all scales, legends, and then re-render the chart.
     * @param duration - Time for the animation of the redrew in milliseconds.
     * @param lazy - If true, the animation can be interrupted by other animations.
     */
    update(duration?: number, lazy?: boolean): void;
}
